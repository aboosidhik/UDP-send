Numer of files can be greater
than 9. But at any time only 9 is possible;

Need to check if all files are inside the 9 at one time;
Need to check if any of the timestamps first or last times are equal;
for(No of fs){
  f1 fst and lst tstmp;
  f2 =  f1->next;
  for (No of fs -1){
    if(f1 fststmp = f2 fststmp || f1 lsttmp == f2 lststmp){
      This file have same first or last stmp;
      Assign a value in struct that it has same timestamp;
      
    } 
  }
}

Sort the files based on first timestamp of each file using GLIST(sort the equal issue);
Sort the files based on the last timestamp using GLISt (sort the equal issue);
Assign the first element of first stamp list;

//counting simulatenous streams maximum at 9
for(file size)
{
  file1 first and last timestamp;
  file1 count simulamtenous 
  for(file size-1)
  {
    file2 length, first, and last timestamp;
    if(file1 last timestamp < file2 first timestamp ){
      End before the start of the first file;
    } else if((fi1 <= fi2 && fi2 <= l1) || (fi2 <= fi1 && l2 >= fi1)){
      if(fi1 < fi2 && l1 < l2) {
          array_start;
          while(fi2 < fi1){
            fi1 =  fi1->next;
          }
          if(fi1 = fi2){
            array_start assign value of both fi1_change and fi2; 
          } else {
            t1 = labs(fi1_changed -fi2-diff);
            t2 = labs(fi1_changed->prev- fi2 -diff);
            if(t1<t2){
              array_start assign value of both fi1_change and fi2; 
            } else{
              array_start assign value of both fi1_change_prev and fi2; 
            }
          }
          array_stop;
          while(fi2 < l1){
            fi2 =  fi2->next;
          }
          if(fi2 = l1){
            array_stop assign value of both fi2 and l1; 
          } else {
            t1 = labs(fi2_changed -l1-diff);
            t2 = labs(fi2_changed->prev- l1 -diff);
            if(t1<t2){
              array_stop assign value of both fi2_change and L1;      
              
            } else{
              array_stop assign value of both fi1_change_prev and l1; 
            }
          }
      } else if(fi1 = fi2 && l1 = l2){
        array_start = fi1, fi2;
        array_stop = l1, l2;
      } else if (fi1 = fi2 && l2<l1){
        array_start = fi1, fi2;
        while(fi1 < l2){
          fi1 =  fi1->next;
        }
        if(fi1 = l2){
          array_stop assign value of both fi1 and l2; 
        } else {
          t1 = labs(fi1_changed -l2-diff);
          t2 = labs(fi1_changed->prev- l2 -diff);
          if(t1<t2){
            array_stop assign value of both fi1_change and L2;      
          
          } else{
            array_stop assign value of both fi1_change_prev and l2; 
          }
        }
      } else if(fi1 = fi2 && l2>l1){
        array_start = fi1, fi2;
        array_stop;
        while(fi2 < l1){
          fi2 =  fi2->next;
        }
        if(fi2 = l1){
          array_stop assign value of both fi2 and l1; 
        } else {
          t1 = labs(fi2_changed -l1-diff);
          t2 = labs(fi2_changed->prev- l1 -diff);
          if(t1<t2){
            array_stop assign value of both fi2_change and L1;      
          
          } else{
            array_stop assign value of both fi2_change_prev and l1; 
          }
        }
      } else if(fi2 = l1 && l2>l1) {
        array_start = fi1, fi2;
        array_stop = l1, fi2;
      } else if (fi1 = fi2 && l2 = fi1) {
        array_start = fi1, fi2;
        array_stop = fi1, l2;
      } else if(l1 = fi2 && l2 = l1){
        array_start = l1, fi2;
        array_stop = l1, l2;
      } else if(fi2 < fi1 && l2 = fi1){
        array_start = fi1, l2;
        array_stop = l2, fi1;
      } else if(fi1 > fi2 && fi1<l2){
        array_start = fi1, l2;
        array_stop = l2, fi1;
      } else if(fi2 < fi1 && l1 = l2){
        
      } else if(fi2 < fi1 && l1<l2){
        
      } else if(fi1 < fi2 && l2 < l1){
        
      } else if(fi1< fi2 && l1 = l2){
        
      }
      count++;
      
    } 
    
  }
  if(count <= 9){
    this file is ok
  } else {
    this file is not correct;
  }
}


//here all filee are with maximum 9 streams 
//first lowest timestamp
array length = glist length;
for(i<no of fs){
  f[i] = first packet of each file;
  glist = glist->next;
}
for (i < no of fs){
glist lowest time stamp;
glist lowest for last timestamp;
lowest file numbers
if(current timestamp < lowest timetsamp)
  array[count] = 

  
}
for (i < no of fs){
  
  for (i < no of fs -1) {
    
  }
  
}
if(f1->equal_tmp_start == 1 ){
  
}

while(first < second){
  
}
end;
